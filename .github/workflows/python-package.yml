name: Python Package CI

on:
  release:
    types: [created]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Check out the repository
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --no-dev

    # - name: Run Tests
    #   run: |
    #     poetry run pytest

  build:
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Check out the repository
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry and Build Package
      run: |
        pip install poetry
        poetry build
        - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip install twine
          poetry publish --build

    # - name: Upload Release Assets
    #   uses: actions/upload-release-asset@v1
    #   with:
    #     upload_url: ${{ github.event.release.upload_url }}
    #     asset_path: ./dist/*
    #     asset_name: ${{ matrix.python-version }}-${{ matrix.os }}-${{ github.ref_name }}.whl
    #     asset_content_type: application/zip

  # release:
  #   runs-on: ubuntu-latest
  #   needs: build

  #   steps:
  #   - name: Check out the repository
  #     uses: actions/checkout@v3

    # - name: Create Release Notes
    #   id: generate_release_notes
    #   run: |
    #     echo "## Release Notes" > release_notes.md
    #     echo "Version: ${{ github.event.release.tag_name }}" >> release_notes.md
    #     echo "Changes:" >> release_notes.md
    #     git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 @^)..@ >> release_notes.md

    # - name: Upload Release Notes
    #   uses: actions/upload-release-asset@v1
    #   with:
    #     upload_url: ${{ github.event.release.upload_url }}
    #     asset_path: ./release_notes.md
    #     asset_name: release_notes.md
    #     asset_content_type: text/markdown

    # - name: Upload Build Files (All Python Versions and Platforms)
    #   uses: actions/upload-release-asset@v1
    #   with:
    #     upload_url: ${{ github.event.release.upload_url }}
    #     asset_path: ./dist/*
    #     asset_name: build_files_${{ github.ref_name }}.zip
    #     asset_content_type: application/zip
